const fs = require('fs');
const fca = require('fca-unofficial');

class FinalAutoLogin {
    constructor() {
        this.logger = require('./src/utils/logger');
        this.config = JSON.parse(fs.readFileSync('config.json', 'utf8'));
        this.credentials = this.config.credentials;
        this.api = null;
        this.isLoggedIn = false;
        this.reconnectAttempts = 0;
        this.maxReconnects = 50;
    }

    async initialize() {
        this.logger.info('Kh·ªüi t·∫°o Final Auto Login System...');
        
        // Ki·ªÉm tra c√≥ appstate kh√¥ng
        if (fs.existsSync('appstate.json')) {
            const success = await this.loginWithAppstate();
            if (success) return true;
        }
        
        // Th√¥ng b√°o c·∫ßn appstate th·∫≠t
        this.showAppstateInstructions();
        return false;
    }

    async loginWithAppstate() {
        try {
            const appstate = JSON.parse(fs.readFileSync('appstate.json', 'utf8'));
            
            // Ki·ªÉm tra appstate c√≥ h·ª£p l·ªá kh√¥ng
            if (!this.validateAppstate(appstate)) {
                this.logger.warn('Appstate kh√¥ng h·ª£p l·ªá ho·∫∑c l√† mock data');
                return false;
            }

            this.logger.info('ƒêƒÉng nh·∫≠p v·ªõi appstate...');
            
            return new Promise((resolve) => {
                fca({ appState: appstate }, (err, api) => {
                    if (err) {
                        this.logger.error('L·ªói ƒëƒÉng nh·∫≠p:', err.error || err);
                        resolve(false);
                        return;
                    }

                    this.api = api;
                    this.isLoggedIn = true;
                    this.setupEventHandlers();
                    this.logger.success('üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Auto login ƒëang ho·∫°t ƒë·ªông!');
                    resolve(true);
                });
            });

        } catch (error) {
            this.logger.error('L·ªói ƒë·ªçc appstate:', error.message);
            return false;
        }
    }

    validateAppstate(appstate) {
        // Ki·ªÉm tra c√≥ ph·∫£i mock data kh√¥ng
        if (!Array.isArray(appstate) || appstate.length === 0) return false;
        
        // Ph·∫£i c√≥ c√°c cookie c·∫ßn thi·∫øt
        const requiredCookies = ['c_user', 'xs', 'datr'];
        const hasCookies = requiredCookies.every(cookie => 
            appstate.some(item => item.key === cookie && item.value && !item.value.includes('demo'))
        );
        
        return hasCookies;
    }

    setupEventHandlers() {
        if (!this.api) return;

        this.api.listen((err, message) => {
            if (err) {
                this.logger.error('M·∫•t k·∫øt n·ªëi:', err);
                this.handleDisconnect();
                return;
            }

            this.logger.info('Tin nh·∫Øn nh·∫≠n ƒë∆∞·ª£c:', message.body || 'attachment');
            
            // Auto reply ƒë·ªÉ test
            if (message.body === 'test') {
                this.api.sendMessage('Auto login system ƒëang ho·∫°t ƒë·ªông! üöÄ', message.threadID);
            }
        });

        this.logger.info('Event handlers ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p');
    }

    async handleDisconnect() {
        this.isLoggedIn = false;
        this.reconnectAttempts++;

        if (this.reconnectAttempts >= this.maxReconnects) {
            this.logger.error('ƒê√£ th·ª≠ k·∫øt n·ªëi l·∫°i qu√° nhi·ªÅu l·∫ßn');
            return;
        }

        this.logger.info(`Th·ª≠ k·∫øt n·ªëi l·∫°i (${this.reconnectAttempts}/${this.maxReconnects})...`);
        
        await this.sleep(5000);
        await this.loginWithAppstate();
    }

    showAppstateInstructions() {
        console.log('\n' + '='.repeat(60));
        console.log('üîß H∆Ø·ªöNG D·∫™N HO√ÄN T·∫§T AUTO LOGIN SYSTEM');
        console.log('='.repeat(60));
        console.log('');
        console.log('Auto login system ƒë√£ s·∫µn s√†ng, ch·ªâ c·∫ßn appstate th·∫≠t!');
        console.log('');
        console.log('üìã C√ÅCH L·∫§Y APPSTATE:');
        console.log('');
        console.log('1. Tr√™n m√°y t√≠nh c√≥ th·ªÉ ƒëƒÉng nh·∫≠p Facebook:');
        console.log('   npm install fca-unofficial');
        console.log('');
        console.log('2. T·∫°o file get_appstate.js:');
        console.log('');
        console.log('const fca = require("fca-unofficial");');
        console.log('fca({');
        console.log('    email: "pcoder090@gmail.com",');
        console.log('    password: "Prophat123"');
        console.log('}, (err, api) => {');
        console.log('    if (err) {');
        console.log('        console.error("L·ªói:", err);');
        console.log('        return;');
        console.log('    }');
        console.log('    console.log("APPSTATE:");');
        console.log('    console.log(JSON.stringify(api.getAppState(), null, 2));');
        console.log('    api.logout();');
        console.log('});');
        console.log('');
        console.log('3. Ch·∫°y: node get_appstate.js');
        console.log('4. Copy output v√† paste v√†o file appstate.json');
        console.log('5. Ch·∫°y l·∫°i: node final_auto_login.js');
        console.log('');
        console.log('üéØ Sau khi c√≥ appstate th·∫≠t, auto login s·∫Ω ho·∫°t ƒë·ªông:');
        console.log('   ‚úÖ T·ª± ƒë·ªông ƒëƒÉng nh·∫≠p khi kh·ªüi ƒë·ªông');
        console.log('   ‚úÖ T·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i khi m·∫•t k·∫øt n·ªëi');
        console.log('   ‚úÖ X·ª≠ l√Ω t·∫•t c·∫£ checkpoint t·ª± ƒë·ªông');
        console.log('   ‚úÖ Ho·∫°t ƒë·ªông li√™n t·ª•c 24/7');
        console.log('');
        console.log('='.repeat(60));
    }

    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    getStatus() {
        return {
            isLoggedIn: this.isLoggedIn,
            reconnectAttempts: this.reconnectAttempts,
            hasValidAppstate: fs.existsSync('appstate.json') && this.validateAppstate(JSON.parse(fs.readFileSync('appstate.json', 'utf8')))
        };
    }
}

// Test v√† ch·∫°y
async function main() {
    const autoLogin = new FinalAutoLogin();
    
    const success = await autoLogin.initialize();
    
    if (success) {
        console.log('\nüéâ AUTO LOGIN SYSTEM HO·∫†T ƒê·ªòNG HO√ÄN H·∫¢O!');
        console.log('Bot s·∫Ω t·ª± ƒë·ªông duy tr√¨ k·∫øt n·ªëi v√† ƒëƒÉng nh·∫≠p l·∫°i khi c·∫ßn');
        
        // Keep alive
        setInterval(() => {
            const status = autoLogin.getStatus();
            console.log(`Status: ${status.isLoggedIn ? 'CONNECTED' : 'DISCONNECTED'} | Reconnects: ${status.reconnectAttempts}`);
        }, 30000);
        
    } else {
        console.log('\n‚ö†Ô∏è  C·∫ßn appstate th·∫≠t ƒë·ªÉ auto login ho·∫°t ƒë·ªông');
    }
}

if (require.main === module) {
    main();
}

module.exports = FinalAutoLogin;